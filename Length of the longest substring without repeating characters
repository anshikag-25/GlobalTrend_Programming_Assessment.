. #include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

int lengthOfLongestSubstring(string s) {
  unordered_map<char, int> charIndexMap; // Map to store the last index of each character
  int maxLength = 0;
  int start = 0; // Starting index of the current window

  for (int end = 0; end < s.length(); ++end) {
    if (charIndexMap.find(s[end]) != charIndexMap.end() && charIndexMap[s[end]] >= start) {
      start = charIndexMap[s[end]] + 1; // Move the start to the right of the last occurrence
    }

    charIndexMap[s[end]] = end; // Update the last index of the character
    maxLength = max(maxLength, end - start + 1); // Update the maximum length
  }

  return maxLength;
}

int main() {
  string s = "length of substring";

  cout << "The length of the longest substring without repeating characters is: "
       << lengthOfLongestSubstring(s) - 1 << endl;

  return 
